
https://drive.google.com/drive/folders/17SjZy_lnLN53Ig1RvP-hjVnNj85Wo8u4

Синхронный for: Вычисляет последовательно.

Параллельный for (неправильный): Вводит гонки данных.
Не все циклы можно распараллелить, только у которых нет рекурсивных зависимостей, так как каждая итерация цикла может выполняться в отдельном потоке. 

Параллельный for с atomic: Предотвращает гонки данных.



reduction:

Совмещает private, shared, и atomic
private - указывает, что каждый поток должен иметь собственный экземпляр переменной.
shared - общие между потоками переменные


Принцип работы:
Для каждой переменной создаются локальные копии в каждом потоке.
Локальные копии инициализируются соответственно типу оператора. Для аддитивных операций — 0 или его аналоги, для мультипликативных операций — 1 или ее аналоги. Смотри также таблицу N1.
Над локальными копиями переменных после выполнения всех операторов параллельной области выполняется заданный оператор. Порядок выполнения операторов не определен.




Задача 2
__________________________________________________________________________________________________________
|________________|_Инициализация внутри потоков_|_global value change_|______Значение после цикла_________|
|private(x)	 |     Неинициализировано(x=i)  |	  -           |Исходное значение (44)	          |
|firstprivate(x) |	 перед циклом(x=44)     |	  -	      |Исходное значение (44)	          |
|lastprivate(x)	 |     Неинициализировано(x=i)  |  	  + 	      |Значение из последней итерации(10) |
|________________|______________________________|_____________________|___________________________________|